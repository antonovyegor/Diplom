--parallel_add DEVICE_FAMILY="Cyclone IV E" MSW_SUBTRACT="NO" PIPELINE=0 REPRESENTATION="SIGNED" RESULT_ALIGNMENT="LSB" SHIFT=0 SIZE=12 WIDTH=12 WIDTHR=16 data result
--VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_padd 2018:09:12:13:04:24:SJ cbx_parallel_add 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ cbx_util_mgl 2018:09:12:13:04:24:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.


FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 156 
SUBDESIGN par_add_ppe
( 
	data[143..0]	:	input;
	result[15..0]	:	output;
) 
VARIABLE
	add1_result[12..0]	:	WIRE;
	add13_result[13..0]	:	WIRE;
	add17_result[15..0]	:	WIRE;
	add21_result[12..0]	:	WIRE;
	add25_result[13..0]	:	WIRE;
	add29_result[12..0]	:	WIRE;
	add33_result[13..0]	:	WIRE;
	add37_result[14..0]	:	WIRE;
	add41_result[15..0]	:	WIRE;
	add5_result[14..0]	:	WIRE;
	add9_result[12..0]	:	WIRE;
	sft10a[12..0] : soft;
	sft11a[12..0] : soft;
	sft12a[12..0] : soft;
	sft14a[13..0] : soft;
	sft15a[13..0] : soft;
	sft16a[13..0] : soft;
	sft18a[15..0] : soft;
	sft19a[15..0] : soft;
	sft20a[15..0] : soft;
	sft22a[12..0] : soft;
	sft23a[12..0] : soft;
	sft24a[12..0] : soft;
	sft26a[13..0] : soft;
	sft27a[13..0] : soft;
	sft28a[13..0] : soft;
	sft2a[12..0] : soft;
	sft30a[12..0] : soft;
	sft31a[12..0] : soft;
	sft32a[12..0] : soft;
	sft34a[13..0] : soft;
	sft35a[13..0] : soft;
	sft36a[13..0] : soft;
	sft38a[14..0] : soft;
	sft39a[14..0] : soft;
	sft3a[12..0] : soft;
	sft40a[14..0] : soft;
	sft42a[15..0] : soft;
	sft43a[15..0] : soft;
	sft44a[15..0] : soft;
	sft4a[12..0] : soft;
	sft6a[14..0] : soft;
	sft7a[14..0] : soft;
	sft8a[14..0] : soft;
	w302w	: WIRE;
	w350w	: WIRE;
	w785w[15..0]	: WIRE;

BEGIN 
	add1_result[] = sft2a[].out + sft3a[].out;
	add13_result[] = sft14a[].out + sft15a[].out;
	add17_result[] = sft18a[].out + sft19a[].out;
	add21_result[] = sft22a[].out + sft23a[].out;
	add25_result[] = sft26a[].out + sft27a[].out;
	add29_result[] = sft30a[].out + sft31a[].out;
	add33_result[] = sft34a[].out + sft35a[].out;
	add37_result[] = sft38a[].out + sft39a[].out;
	add41_result[] = sft42a[].out + sft43a[].out;
	add5_result[] = sft6a[].out + sft7a[].out;
	add9_result[] = sft10a[].out + sft11a[].out;
	sft10a[].in = ( w350w, ( (! data[131..131]), ( data[130..130], ( data[129..129], ( data[128..128], ( data[127..127], ( data[126..126], ( data[125..125], ( data[124..124], ( data[123..123], ( data[122..122], ( data[121..120]))))))))))));
	sft11a[].in = ( w350w, ( (! data[35..35]), ( data[34..34], ( data[33..33], ( data[32..32], ( data[31..31], ( data[30..30], ( data[29..29], ( data[28..28], ( data[27..27], ( data[26..26], ( data[25..24]))))))))))));
	sft12a[].in = add9_result[];
	sft14a[].in = ( w350w, ( sft12a[12..12].out, ( (! data[83..83]), ( data[82..82], ( data[81..81], ( data[80..80], ( data[79..79], ( data[78..78], ( data[77..77], ( data[76..76], ( data[75..75], ( data[74..74], ( data[73..72])))))))))))));
	sft15a[].in = ( w350w, ( w350w, ( sft12a[11..11].out, ( sft12a[10..10].out, ( sft12a[9..9].out, ( sft12a[8..8].out, ( sft12a[7..7].out, ( sft12a[6..6].out, ( sft12a[5..5].out, ( sft12a[4..4].out, ( sft12a[3..3].out, ( sft12a[2..2].out, ( sft12a[1..1].out, sft12a[0..0].out)))))))))))));
	sft16a[].in = add13_result[];
	sft18a[].in = ( w350w, ( sft8a[14..14].out, ( sft8a[13..13].out, ( sft8a[12..12].out, ( sft8a[11..11].out, ( sft8a[10..10].out, ( sft8a[9..9].out, ( sft8a[8..8].out, ( sft8a[7..7].out, ( sft8a[6..6].out, ( sft8a[5..5].out, ( sft8a[4..4].out, ( sft8a[3..3].out, ( sft8a[2..2].out, ( sft8a[1..1].out, sft8a[0..0].out)))))))))))))));
	sft19a[].in = ( w350w, ( w350w, ( sft36a[13..13].out, ( sft28a[12..12].out, ( sft16a[11..11].out, ( sft16a[10..10].out, ( sft16a[9..9].out, ( sft16a[8..8].out, ( sft16a[7..7].out, ( sft16a[6..6].out, ( sft16a[5..5].out, ( sft16a[4..4].out, ( sft16a[3..3].out, ( sft16a[2..2].out, ( sft16a[1..1].out, sft16a[0..0].out)))))))))))))));
	sft20a[].in = add17_result[];
	sft22a[].in = ( w350w, ( (! data[119..119]), ( data[118..118], ( data[117..117], ( data[116..116], ( data[115..115], ( data[114..114], ( data[113..113], ( data[112..112], ( data[111..111], ( data[110..110], ( data[109..108]))))))))))));
	sft23a[].in = ( w350w, ( (! data[11..11]), ( data[10..10], ( data[9..9], ( data[8..8], ( data[7..7], ( data[6..6], ( data[5..5], ( data[4..4], ( data[3..3], ( data[2..2], ( data[1..0]))))))))))));
	sft24a[].in = add21_result[];
	sft26a[].in = ( w350w, ( sft24a[12..12].out, ( (! data[71..71]), ( data[70..70], ( data[69..69], ( data[68..68], ( data[67..67], ( data[66..66], ( data[65..65], ( data[64..64], ( data[63..63], ( data[62..62], ( data[61..60])))))))))))));
	sft27a[].in = ( w350w, ( w350w, ( sft24a[11..11].out, ( sft24a[10..10].out, ( sft24a[9..9].out, ( sft24a[8..8].out, ( sft24a[7..7].out, ( sft24a[6..6].out, ( sft24a[5..5].out, ( sft24a[4..4].out, ( sft24a[3..3].out, ( sft24a[2..2].out, ( sft24a[1..1].out, sft24a[0..0].out)))))))))))));
	sft28a[].in = add25_result[];
	sft2a[].in = ( w350w, ( (! data[107..107]), ( data[106..106], ( data[105..105], ( data[104..104], ( data[103..103], ( data[102..102], ( data[101..101], ( data[100..100], ( data[99..99], ( data[98..98], ( data[97..96]))))))))))));
	sft30a[].in = ( w350w, ( (! data[143..143]), ( data[142..142], ( data[141..141], ( data[140..140], ( data[139..139], ( data[138..138], ( data[137..137], ( data[136..136], ( data[135..135], ( data[134..134], ( data[133..132]))))))))))));
	sft31a[].in = ( w350w, ( (! data[47..47]), ( data[46..46], ( data[45..45], ( data[44..44], ( data[43..43], ( data[42..42], ( data[41..41], ( data[40..40], ( data[39..39], ( data[38..38], ( data[37..36]))))))))))));
	sft32a[].in = add29_result[];
	sft34a[].in = ( w350w, ( sft32a[12..12].out, ( (! data[95..95]), ( data[94..94], ( data[93..93], ( data[92..92], ( data[91..91], ( data[90..90], ( data[89..89], ( data[88..88], ( data[87..87], ( data[86..86], ( data[85..84])))))))))))));
	sft35a[].in = ( w350w, ( w350w, ( sft32a[11..11].out, ( sft32a[10..10].out, ( sft32a[9..9].out, ( sft32a[8..8].out, ( sft32a[7..7].out, ( sft32a[6..6].out, ( sft32a[5..5].out, ( sft32a[4..4].out, ( sft32a[3..3].out, ( sft32a[2..2].out, ( sft32a[1..1].out, sft32a[0..0].out)))))))))))));
	sft36a[].in = add33_result[];
	sft38a[].in = ( w350w, ( sft28a[13..13].out, ( sft16a[12..12].out, ( sft28a[11..11].out, ( sft28a[10..10].out, ( sft28a[9..9].out, ( sft28a[8..8].out, ( sft28a[7..7].out, ( sft28a[6..6].out, ( sft28a[5..5].out, ( sft28a[4..4].out, ( sft28a[3..3].out, ( sft28a[2..2].out, ( sft28a[1..1].out, sft28a[0..0].out))))))))))))));
	sft39a[].in = ( w350w, ( sft16a[13..13].out, ( sft36a[12..12].out, ( sft36a[11..11].out, ( sft36a[10..10].out, ( sft36a[9..9].out, ( sft36a[8..8].out, ( sft36a[7..7].out, ( sft36a[6..6].out, ( sft36a[5..5].out, ( sft36a[4..4].out, ( sft36a[3..3].out, ( sft36a[2..2].out, ( sft36a[1..1].out, sft36a[0..0].out))))))))))))));
	sft3a[].in = ( w350w, ( (! data[23..23]), ( data[22..22], ( data[21..21], ( data[20..20], ( data[19..19], ( data[18..18], ( data[17..17], ( data[16..16], ( data[15..15], ( data[14..14], ( data[13..12]))))))))))));
	sft40a[].in = add37_result[];
	sft42a[].in = ( w302w, ( sft20a[14..14].out, ( sft20a[13..13].out, ( sft20a[12..12].out, ( sft20a[11..11].out, ( sft20a[10..10].out, ( sft20a[9..9].out, ( sft20a[8..8].out, ( sft20a[7..7].out, ( sft20a[6..6].out, ( sft20a[5..5].out, ( sft20a[4..4].out, ( sft20a[3..3].out, ( sft20a[2..2].out, ( sft20a[1..1].out, sft20a[0..0].out)))))))))))))));
	sft43a[].in = ( sft20a[15..15].out, ( sft40a[14..14].out, ( sft40a[13..13].out, ( sft40a[12..12].out, ( sft40a[11..11].out, ( sft40a[10..10].out, ( sft40a[9..9].out, ( sft40a[8..8].out, ( sft40a[7..7].out, ( sft40a[6..6].out, ( sft40a[5..5].out, ( sft40a[4..4].out, ( sft40a[3..3].out, ( sft40a[2..2].out, ( sft40a[1..1].out, sft40a[0..0].out)))))))))))))));
	sft44a[].in = add41_result[];
	sft4a[].in = add1_result[];
	sft6a[].in = ( w350w, ( w302w, ( sft4a[12..12].out, ( (! data[59..59]), ( data[58..58], ( data[57..57], ( data[56..56], ( data[55..55], ( data[54..54], ( data[53..53], ( data[52..52], ( data[51..51], ( data[50..50], ( data[49..48]))))))))))))));
	sft7a[].in = ( w350w, ( w350w, ( w350w, ( sft4a[11..11].out, ( sft4a[10..10].out, ( sft4a[9..9].out, ( sft4a[8..8].out, ( sft4a[7..7].out, ( sft4a[6..6].out, ( sft4a[5..5].out, ( sft4a[4..4].out, ( sft4a[3..3].out, ( sft4a[2..2].out, ( sft4a[1..1].out, sft4a[0..0].out))))))))))))));
	sft8a[].in = add5_result[];
	result[15..0] = w785w[15..0];
	w302w = B"1";
	w350w = B"0";
	w785w[] = ( sft44a[15..15].out, sft44a[14..14].out, sft44a[13..13].out, sft44a[12..12].out, sft44a[11..11].out, sft44a[10..10].out, sft44a[9..9].out, sft44a[8..8].out, sft44a[7..7].out, sft44a[6..6].out, sft44a[5..5].out, sft44a[4..4].out, sft44a[3..3].out, sft44a[2..2].out, sft44a[1..1].out, sft44a[0..0].out);
END;
--VALID FILE
